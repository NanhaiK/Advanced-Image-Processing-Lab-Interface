function [OUTIMG1 OUTIMG2]=lcdct2_mb(INPIMG,sp_mask,p,g,thr, k, wait_bar_handle, axes_3, axes_4)% LOCAL DCT FILTERING OVER WINDOW (SzWx,SzWy)=size(sp_mask);% sp_mask - window in the spectral domain% p - power to which magnitudes of spectral coefficients are raised% g -amplification coefficient for modified spectral coefficients  % thr - threshold with which magnitudes of spectral coefficients are compared% CALL OUTIMG=lcdct2(INPIMG,sp_mask,p,g,thr);[SzX SzY]=size(INPIMG);[SzWx SzWy]=size(sp_mask);W=SzWx*SzWy; THR=thr*sqrt(SzWx); SzWx_half=floor(SzWx/2); SzWy_half=floor(SzWy/2); imgext=img_ext_mb(INPIMG,SzWx_half,SzWy_half);  waitbar( 1/7,    wait_bar_handle);im_col = im2col(imgext, [SzWx SzWy], 'sliding');waitbar(2/7 ,    wait_bar_handle);T = dctmtx(SzWx);V = dctmtx(SzWy);im_dct = kron(T, V)*im_col;dc_f = im_dct(1,:);alpha_sign_f=sign(im_dct); alpha_abs_f=abs(im_dct);waitbar( 3/7,    wait_bar_handle);alpha_abs_f(1,:)=0;norm1_f=sum(alpha_abs_f.^2, 1);if k==1,    mask_f=alpha_abs_f>=THR;else	    alpha_abs_f(1,:)=dc_f;    alpha_2_f=alpha_abs_f.^2;    alpha_2_1_f=alpha_2_f-THR.^2;     alpha_2_1_f=alpha_2_f.*(alpha_2_1_f>0);    mask_f=alpha_2_1_f./(alpha_2_f+eps); endR=(sum(mask_f,1)/W).^0.5;alpha_mod_f=(alpha_abs_f.*mask_f).^p;	waitbar( 4/7,    wait_bar_handle);alpha_abs_f(1,:)=0;norm2_f=sum((alpha_abs_f.^(p)).^2,1)+eps;% norm_factor = ones(size(alpha_mod_f,1),1)*(norm1./norm2).^0.5;% alpha_mod_f=g*alpha_mod_f.*norm_factor;alpha_mod_f=g*(alpha_mod_f.*(ones(size(alpha_mod_f,1),1)*sqrt(norm1_f./norm2_f)));waitbar( 5/7,    wait_bar_handle);alpha_mod_f(1,:)=dc_f;alpha_f=alpha_sign_f.*alpha_mod_f;%alpha=alpha.*sp_mask;	out_f=kron(T', V')*(alpha_f);index = sub2ind([SzWy, SzWx ], fix((SzWx+1)/2)+1,fix((SzWy+1)/2)+1);OUTIMG1=reshape(out_f(index,:), size(INPIMG));OUTIMG2=255*reshape(R, size(INPIMG));waitbar(6/7 ,    wait_bar_handle);% for X=1:SzX%    for Y=1:SzY,%         index = Y+(X-1)*SzY;%         fragm=imgext(Y:SzWy+Y-1,X:SzWx+X-1);%         alpha=dct2(fragm);% %FILTER%         dc=alpha(1,1);%         if ( dc_f(:, index) - dc > 0.000001)%             s = 0;%         end%         alpha_sign=sign(alpha); %         if ( sum(sum(abs(alpha_sign_f(:, index) - alpha_sign(:)) ))> 0.000001)%             s = 0;%         end%         alpha_abs=abs(alpha);% %         alpha_abs(1,1)=0;%         norm1=sum(sum(alpha_abs.^2));%         if k==1,%             mask=alpha_abs>=THR;%         else	%             alpha_abs(1,1)=dc;%             alpha_2=alpha_abs.^2;%             alpha_2_1=alpha_2-THR.^2; alpha_2_1=alpha_2.*(alpha_2_1>0);%             mask=alpha_2_1./(alpha_2+eps); %         end%         R=(sum(sum(mask))/W).^0.5;%         alpha_mod=(alpha_abs.*mask).^p;	%         alpha_abs(1,1)=0;%         if ( sum(sum(abs((alpha_abs_f(:, index) - alpha_abs(:)))))> 0.000001)%             s = 0;%         end%         norm2=sum(sum((alpha_abs.^(p)).^2))+eps;%         alpha_mod=g*alpha_mod*sqrt(norm1/norm2);%         alpha_mod(1,1)=dc;%         alpha=alpha_sign.*alpha_mod;%         alpha=alpha.*sp_mask;%         if ( sum(sum(abs((alpha_f(:, index) - alpha(:)))))> 0.000001)%             s = 0;%         end%         out=idct2(alpha);%         if ( sum(sum(abs((out_f(:, index) - out(:)))))> 0.000001)%             s = 0;%         end%         OUTIMG1(Y,X)=out(fix((SzWx+1)/2)+1,fix((SzWy+1)/2)+1);%         if ( sum(sum(abs((OUTIMG1(Y,X) - OUTIMG_1(Y,X)))))> 0.000001)%             s = 0;%         end%         OUTIMG2(Y,X)=255*R;%    end%    waitbar(X/SzX ,    wait_bar_handle);% end % sum(sum(abs(double(OUTIMG1) - double(OUTIMG_1'))))OUTIMG1=max(0, min(255,round(OUTIMG1)));if min(OUTIMG2(:))~=min(OUTIMG2(:))    OUTIMG2=uquan256_mb(OUTIMG2);end