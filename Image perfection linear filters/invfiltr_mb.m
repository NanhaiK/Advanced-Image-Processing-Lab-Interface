function [BLURIMG_n, OUTIMG] =invfiltr_mb(INPIMG,FILTMASK,sigma,ThrF,ThrIm)INPIMG = double(INPIMG);% Simulation of inverse filtering for image deblurring% FILTMASK is impulse response of the blur to be simulated (size should be an odd number)% ThrF is a threshold in frequency domain to eliminate zeros% in blur filter frequency response % (values in a range of about (sigma/256)^2 are recommended) ;% ThrIm is a threshold in image domain for correction term of the OUTIMG% (values in a range 20-50 are recommended)% sigma is standard deviation of additive noise to be added to the blurred image% Call OUTIMG=invfiltr(INPIMG,FILTMASK,sigma,ThrF,ThrIm);[SzX SzY]=size(INPIMG);BLURIMG=conv2d_mb(INPIMG,FILTMASK);BLURIMG_n=BLURIMG+sigma*randn(SzX,SzY);INPIMG_sp=fft2(BLURIMG_n);% -------------------------FORMATION OF THE PSEUDOINVERSE FILTER-------------------[Szx Szy]=size(FILTMASK);PSF=zeros(SzX,SzY); PSF(floor(SzX/2+1-(Szx-1)/2:SzX/2+1+(Szx-1)/2),floor(SzY/2+1-(Szy-1)/2:SzY/2+1+(Szy-1)/2))=FILTMASK;PSF=fftshift(PSF);fr_resp=fft2(PSF);inv_fltr=fr_resp./(max((abs(fr_resp)).^2, eps)+ThrF);% ------------------------ FILTERING--------------------------------------------OUTIMG=real(ifft2(INPIMG_sp.*inv_fltr));diff=BLURIMG_n-OUTIMG;diff=diff.*(diff<ThrIm)+ThrIm*(diff>=ThrIm);OUTIMG=BLURIMG_n-diff;OUTIMG=round(srezka_mb(OUTIMG));