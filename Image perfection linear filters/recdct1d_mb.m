function [INPSIGN, LOCSPEC, LOCSP, OUT]=recdct1d_mb(INPSIGN,SzW,stdnoise,Thr, TransformType)INPSIGN = double(INPSIGN);% Simulating 1-D Local spectral analysis and filtering in DCT basis% in the moving window of SzW samples (odd number)% Input - 1D signal(SzX,1);% Output - array of ((SzW+1)/2*Size(INPSIGN)) samples of local DCT spectra% Call LOCSPEC=recdct1d(INPSIGN,SzW,stdnoise,threshold);% SzW - window size;% stdnoise - standard deviation of additive noise to be added to INPSIGN % Thr - is a threshold applied to DCT coefficients to cancel% those whose magnitude does not exceed it % values about (1-3)*stdnoise/max(INPSIGN) are recommended)% Call LOCSPEC=recdct1d(INPSIGN,SzW,stdnoise,threshold);SzX=max(size(INPSIGN)); INPSIGN=reshape(INPSIGN,1,SzX);mx=max(INPSIGN);Lx=ceil((SzW-1)/2);INPSIGN=INPSIGN+stdnoise*randn(size(INPSIGN));% Computation of local spectraif ( strcmpi(TransformType, 'DCT'))    LOCSPEC=locdct1_mb(INPSIGN,Lx);elseif ( strcmpi(TransformType, 'Haar'))    LOCSPEC=lochaar1_mb(INPSIGN,Lx);end%****************************Filtering*********************************% Spectrum shrinkageLOCSP_m=abs(LOCSPEC);LOCSP_ph=sign(LOCSPEC);LOCSP_m_Shr=LOCSP_m.*(LOCSP_m>=Thr*mx);% ShrinkageLOCSP_m_Shr(1,:)=LOCSP_m(1,:);% ReconstructionLOCSP=LOCSP_m_Shr.*LOCSP_ph;if ( strcmpi(TransformType, 'DCT'))    OUTSIGN=locidct1_mb(LOCSP);elseif ( strcmpi(TransformType, 'Haar'))    OUTSIGN=locihaar1_mb(LOCSP);endOUT=[OUTSIGN];%;LOCSPEC];