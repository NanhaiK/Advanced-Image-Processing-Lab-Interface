function [OUTIMG1 OUTIMG2]=lcdct2_mb(INPIMG,sp_mask,p,g,thr, wait_bar_handle)% LOCAL DCT FILTERING OVER WINDOW (SzWx,SzWy)=size(sp_mask);% sp_mask - window in the spectral domain% p - power to which magnitudes of spectral coefficients are raised% g -amplification coefficient for modified spectral coefficients  % thr - threshold with which magnitudes of spectral coefficients are compared% CALL OUTIMG=lcdct2(INPIMG,sp_mask,p,g,thr);[SzWx SzWy]=size(sp_mask);W=SzWx*SzWy;THR=thr*SzWx*SzWy;SzWx_half=floor(SzWx/2);SzWy_half=floor(SzWy/2);imgext=img_ext_mb(INPIMG,SzWx_half,SzWy_half);waitbar( 1/7,    wait_bar_handle);im_col = im2col(imgext, [SzWx SzWy], 'sliding');waitbar(2/7 ,    wait_bar_handle);T = dctmtx(SzWx);V = dctmtx(SzWy);im_dct = kron(T, V)*im_col;dc = im_dct(1,:);alpha_sign=sign(im_dct); alpha_abs=abs(im_dct);waitbar( 3/7,    wait_bar_handle);alpha_abs(1,:)=0;norm1=sum(alpha_abs.^2, 1);mask=alpha_abs>=THR;R=(sum(mask,1)/W).^0.5;alpha_mod_f=(alpha_abs.*mask).^p;	waitbar( 4/7,    wait_bar_handle);alpha_abs(1,:)=0;norm2=sum((alpha_abs.^(p)).^2,1)+eps;norm_factor = ones(size(alpha_mod_f,1),1)*(norm1./norm2).^0.5;alpha_mod_f=g*alpha_mod_f.*norm_factor;waitbar( 5/7,    wait_bar_handle);alpha_mod_f(1,:)=dc;alpha_f=alpha_sign.*alpha_mod_f;%alpha=alpha.*sp_mask;	out_f=kron(T', V')*(alpha_f);OUTIMG1=reshape(out_f(ceil(SzWx*SzWy/2),:), size(INPIMG));OUTIMG2=255*reshape(R, size(INPIMG));waitbar(6/7 ,    wait_bar_handle);end