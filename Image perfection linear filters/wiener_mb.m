function [imgn IMGWIENER IMGEMPWIENER]=wiener_mb(INPIMG,gamma,NoiseStDev,RD)INPIMG = double(INPIMG);% Simulation of the ideal Wiener filter and an empirical Wiener filter% for image deblurring and denoising% NoiseStDev-standard deviation of additive noise% RD - spread parameter of gaussian-shaped low-pass filter in frequency domain% gamma is a weight parameter for the empirical Wiener filter design (values around 1 are recommended)% OUTPUT=[IMGNOISY IMGWIENER IMGEMPWIENER];%Call OUTIMG=wiener(INPIMG,gamma,SNR,RD);[SzX SzY]=size(INPIMG);ImgSz=min(SzX,SzY);spimg=fft2(INPIMG);%----------------------Formation of blurred image---------------------------R=(RD*ImgSz/2)^2;r=radius_mb(ImgSz/2);mask=exp(-(r.^2/(R+eps)));mask=fftshift(mask)+eps;spimg=spimg.*mask;spimg2=abs(spimg).^2;INPIMG_=real(ifft2(spimg));%----------------Formation of additive noise interference------------------noise=NoiseStDev*randn(size(INPIMG));spnoise=(abs(fft2(noise))).^2;N=(mean(mean(spnoise)))*gamma*ones(size(INPIMG));imgn=INPIMG_+noise;spimgn=fft2(imgn);spimgn2=abs(spimgn).^2;spimgn2=conv2(spimgn2,ones(5)/25,'same');sigma=std2(INPIMG-imgn);% --------------Ideal Wiener filter----------------------------------------% WIENER=(mask.*spimg2)./((mask.^2).*spimg2+mean(spnoise(:)));WIENER=(mask.*spimg2)./((mask.^2).*spimg2+spnoise);IMGWIENER=real(ifft2(spimgn.*WIENER));sigma=std2(INPIMG-IMGWIENER);% --------------Empirical Wiener filter------------------------------------EMPWIENER=(spimgn2-N)./(spimgn2+eps);EMPWIENER=EMPWIENER.*(EMPWIENER>=0);EMPWIENER=EMPWIENER./mask;IMGEMPWIENER=real(ifft2(spimgn.*EMPWIENER));sigma=std2(INPIMG-IMGEMPWIENER);% OUTPUT=[imgn IMGWIENER IMGEMPWIENER];% % OUTPUT = IMGWIENER;