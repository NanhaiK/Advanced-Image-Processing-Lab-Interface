function gauss=corrgauss_mb(N,RE,RI)% CORRGAUS: generating correlated Gaussian field of NxN pixels% with power spectrum in the form of a ring; % RE - external radius; RI - internal radius of the ring (in fraction of N/2)% Call gauss=corrgauss(N,RE,RI);%clf%colormap(gray(256));f=(rand(N)-0.5)+i*(rand(N)-0.5);f(2:N/2,2:N/2)=conj(f(N:-1:N/2+2,N:-1:N/2+2));f(2:N/2,N/2+2:N)=conj(f(N:-1:N/2+2,N/2:-1:2));f(2:N/2,1)=conj(f(N:-1:N/2+2,1));f(1,2:N/2)=conj(f(1,N:-1:N/2+2));f(N/2+1,2:N/2)=conj(f(N/2+1,N:-1:N/2+2));f(2:N/2,N/2+1)=conj(f(N:-1:N/2+2,N/2+1));%subplot(131);display1(real(f));title('corrgaus.m: Initial random field');drawnowRING=255*ones(N);CX=N/2+1;CY=N/2+1;for x=1:N,	for y=1:N,		if ((x-CX)^2 + (y-CY)^2)<(RI*N/2)^2;		RING(x,y)=0;		elseif ((x-CX)^2 + (y-CY)^2)>(RE*N/2)^2;		RING(x,y)=0;		else RING(x,y)=255;end	endend%subplot(132); display1(RING);title('Filter frequency response');drawnowRING_=fftshift(RING);f_=f.*RING_;gauss=real(fft2(f_));%gauss=uquan256_mb(gauss);%gauss=[255*(real(f)+0.5) RING gauss];%display1(gauss);%title(['Primary field, filter frequency response and output field;Rext=',num2str(RE),'; Rint=',num2str(RI)])