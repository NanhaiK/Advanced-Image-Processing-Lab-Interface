function OUTIMG=filtim_r_mb(INPIMG,thr,delta)% Impulse noise filtering with a recursive algorithm % OUTIMG=INPIMG if INPIMG-conv(INPIMG,mask)<thr% Otherwise OUTIMG=conv(INPIMG,mask)+delta*sign(INPIMG-conv(INPIMG,mask)); % thr - detection threshold;% delta - a residual edge contrast for preserving edges;% Call : OUTIMG=filtim_r(INPIMG,thr,delta);[SzX SzY]=size(INPIMG);INPIMG = double(INPIMG);OUTIMG = INPIMG;% for k=1:size(INPIMG,3)%     im_ext(:,:,k) = padarray(INPIMG(:,:,k), [ 1  1], 'symmetric');% end% im_col = im2col(im_ext, [3 3], 'sliding');% OUTIMG = im_col(4,:);% % center pixel is im_col(5,:)%  smth = (0.2*(im_col(1,:)+im_col(7,:)) +0.3*(im_col(4,:)+im_col(2,:)));% diff = im_col(5,:) - smth;% % while(sum(diff>thr) )%     OUTIMG(abs(diff)>thr) = smth(abs(diff)>thr)+delta*sign(diff(abs(diff)>thr));%     OUTIMG = uint8(reshape(OUTIMG, size(INPIMG)));%     return;% %     im_col = im2col(reshape(OUTIMG, size(INPIMG) + [1 1 0]), [2 3], 'sliding');% %     diff = OUTIMG- (0.2*(im_col(1,:)+im_col(5,:)) +0.3*(im_col(3,:)+im_col(2,:)));% % end% -----------------------First row-----------------------------------for y=2:SzY,	diff=INPIMG(1,y)-OUTIMG(1,y-1);	signdiff=sign(diff);	absdiff=abs(diff);     if absdiff>thr        OUTIMG(1,y)=OUTIMG(1,y-1)+delta*signdiff;    endend%---------------------- Remaining rows-------------------------------for x=2:SzX    for y=2:SzY-1        smth=0.3*(OUTIMG(x,y-1)+OUTIMG(x-1,y))+0.2*(OUTIMG(x-1,y-1)+OUTIMG(x-1,y+1));        diff=INPIMG(x,y)-smth;        signdiff=sign(diff);        absdiff=abs(diff);         if absdiff>thr,            OUTIMG(x,y)=smth+delta*signdiff;        end    end    % Last pixel in row    y=SzY;	smth=0.35*(OUTIMG(x,y-1)+OUTIMG(x-1,y))+0.3*OUTIMG(x-1,y-1);	diff=INPIMG(x,SzY)-smth;		signdiff=sign(diff);	absdiff=abs(diff);     if absdiff>thr,         OUTIMG(x,SzY)=smth+delta*signdiff;    end    colormap(gray(256));    display1_mb(OUTIMG);    title(['filtim\_r.m: Filtered image, thr=',num2str(thr),'; delta=',num2str(delta)]);    drawnowendOUTIMG=round(OUTIMG);	colormap(gray(256));display1_mb([INPIMG OUTIMG]);title(['filtim\_r.m: Input noisy and filtered images, thr=',num2str(thr),'; delta=',num2str(delta)]);drawnow