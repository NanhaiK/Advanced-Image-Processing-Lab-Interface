function OUTIMG=filtrimp(INPIMG,THR,Niter);% Simulation of filtering impulse noise% by an iterative algorithm with linear smoothing% THR - the lowest threshold for detection of noise outbursts;% Niter - number of iterations with decreasing the threshold% Call OUTIMG=filtrimp(INPIMG,THR,Niter);mask=[0.1 0.15 0.1;0.15 0 0.15;0.1 0.15 0.1];OUTIMG=INPIMG;for t=1:Niter,    smth=conv2(OUTIMG,mask,'same');    diff=abs(OUTIMG-smth);	corrmask=diff>(128*(Niter-t)+THR*(t-1))/(Niter-1);	OUTIMG=OUTIMG.*(1-corrmask)+smth.*corrmask;    colormap(gray(256));        display1(OUTIMG);    title(['filtrimp.m: Filtered image; THR=',num2str(THR),'; Iter=',num2str(t)]);    drawnowendcolormap(gray(256));display1([INPIMG OUTIMG]);title(['filtrimp.m: Input noisy and filtered images; THR=',num2str(THR),'; Iter=',num2str(t)]);drawnow