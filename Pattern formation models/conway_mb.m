function soup=conway_mb(SzX,SzY,Live_Thr,sigma,Lapl,Quant,Niter,Displ, axes_1, axes_2, axes_3, axes_4)%  A gray-scale modification of Conway's game "Life"% soup1=soup(.*exp(-(((S8-a1).^2)/(Sigma^2)))+exp(-(((S8-a2).^2)/(Sigma^2)));% a1=(Quant-1)*2; a2=(Quant-1)*3;% S8=conv2(soup,[1 1 1;1 -8*Lapl 1;1 1 1]);% Lapl is a parameter equal to 0 or 1;% Classical binary Conway corresponds to Quant=2, sigma=1; Lapl=0;% For Q=256, sigma around 24-26 produces stable �stars�% Live_Thr - threshold (0,1) for selection �live� cells;% When Live_Thr=1 all cells in the initial soup are alive % Niter - number of iteration steps;% Displ - number of iterations per one display% Call soup=conway(SzX,SzY,Live_Thr,sigma,Lapl,Quant,Niter,Displ);colormap(jet(Quant));if Quant==2,map=[0 0 1;1 0 0];colormap(map),endSigma=sigma^2;a1=(Quant-1)*2; a2=(Quant-1)*3;mask=[1 1 1;1 -8*Lapl 1;1 1 1];X=2:SzX-1; Y=2:SzY-1;time = clock;seed = time([6]);rand('seed',seed);r=(rand(SzX,SzY)<Live_Thr).*rand(SzX,SzY);delta_iter=zeros(1,Niter+1);delta_iter=zeros(1,10);soup=round((Quant-1)*r);soup1=soup;image(soup,  'parent', axes_1);axis(axes_1,  'image');axis(axes_1,  'off'); %colorbar(gray(    256));drawnowfor n=1:Niter;	S8=conv2(soup,mask,'same');    soup1(X,Y)=soup(X,Y).*exp(-(((S8(X,Y)-a1).^2)/(Sigma^2)))+exp(-(((S8(X,Y)-a2).^2)/(Sigma^2)));	soup1(1,:)=round((Quant-1)*rand(1,SzY));	soup1(SzX,:)=round((Quant-1)*rand(1,SzY));	soup1(:,1)=round((Quant-1)*rand(SzX,1));	soup1(:,SzY)=round((Quant-1)*rand(SzX,1));	soup1=round(soup1);	soup=rem((Quant-1)*soup,1);    d=soup-soup1;    SzX_dev_by_8=round(SzX/8);    SzY_dev_by_8=round(SzY/8);    delta_iter1(n)=sum(sum(abs(d(SzX_dev_by_8:SzX-SzX_dev_by_8-1,SzY_dev_by_8:SzY-SzY_dev_by_8-1))>0));    delta_iter2(n)=std2(d(SzX_dev_by_8:SzX-SzX_dev_by_8-1,SzY_dev_by_8:SzY-SzY_dev_by_8-1));    h=imghisto_mb(soup1);    if n/Displ-fix(n/Displ)==0        image(soup1, 'parent', axes_1);        axis(axes_1, 'image');axis(axes_1,  'off'); %colorbar(256);        DisplayAxesTitle(axes_1, ['LiveThr=',num2str(Live_Thr),'; sigma=',num2str(sigma),'; Quant=',num2str(Quant),'; Lapl=',num2str(Lapl),'; Niter=',num2str(n)], 'TM');        drawnow;        image(abs(soup(2:SzX-1,2:SzY-1)-soup1(2:SzX-1,2:SzY-1)), 'parent', axes_2);        axis(axes_2, 'image');axis(axes_2,  'off');%colorbar(256);        DisplayAxesTitle(axes_2, 'Interframe difference', 'TM');        drawnow;        plot(axes_3, delta_iter1.^0.5 );        axis (axes_3, 'tight');        grid(axes_3, 'on');        xlabel(axes_3, 'Iteration number');        DisplayAxesTitle(axes_3, 'Number of modified pixels.^{0.5}', 'LM');        drawnow;        plot(axes_4, delta_iter2.^0.2 );        axis(axes_4, 'tight');        grid(axes_4, 'on');        xlabel(axes_4, 'Iteration number');        DisplayAxesTitle(axes_4, '(Std of modified pixels)^{0.2}', 'RM');        drawnow;%         plot(h, 'parent', axes_4);axis(axes_4,  'tight');grid(axes_4, 'on');%         xlabel('Iteration number');%         title('Histogram');%         drawnow    endsoup=soup1;endimage(soup1, 'parent', axes_1);axis(axes_1, 'image');axis(axes_1,  'off'); %colorbar(256);DisplayAxesTitle(axes_1, ['LiveThr=',num2str(Live_Thr),'; sigma=',num2str(sigma),'; Quant=',num2str(Quant),'; Lapl=',num2str(Lapl),'; Niter=',num2str(n)], 'TM');drawnow;% image(abs(soup(2:SzX-1,2:SzY-1)-soup1(2:SzX-1,2:SzY-1)), 'parent', axes_2);% axis(axes_2, 'image');axis(axes_2,  'off');%colorbar(256);% DisplayAxesTitle(axes_2, 'Interframe difference', 'TM');drawnow;plot(axes_3, delta_iter1.^0.5 );axis (axes_3, 'tight');grid(axes_3, 'on');xlabel(axes_3, 'Iteration number');DisplayAxesTitle(axes_3, 'Number of modified pixels.^{0.5}', 'LM');drawnow;plot(axes_4, delta_iter2.^0.2 );axis(axes_4, 'tight');grid(axes_4, 'on');xlabel(axes_4, 'Iteration number');DisplayAxesTitle(axes_4, '(Std of modified pixels)^{0.2}', 'RM');drawnow;% soup=round(255*soup/(Quant-1));